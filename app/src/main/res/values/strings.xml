<resources>
    <string name="app_name">Codd\'s 12 Rules</string>
    <string name="head_text">Codd\'s 12 Rules</string>
    <string name="button1">Information Rule</string>
    <string name="button2">Guaranteed Access Rule</string>
    <string name="button3">Systematic Treatment of NULL Values</string>
    <string name="button4">Active Online Catalog</string>
    <string name="button5">Comprehensive Data Sub-Language Rule</string>
    <string name="button6">View Updating Rule</string>
    <string name="button7">High-Level Insert, Update, and Delete Rule</string>
    <string name="button8">Physical Data Independence</string>
    <string name="button9">Logical Data Independence</string>
    <string name="button10">Integrity Independence</string>
    <string name="button11">Distribution Independence</string>
    <string name="button12">Non-Subversion Rule</string>
    <string name="btn1">The data stored in a database, may it be user data or metadata, must be a value of some table cell. Everything in a database must be stored in a table format.</string>
    <string name="btn2">Every single data element (value) is guaranteed to be accessible logically with a combination of table-name, primary-key (row value), and attribute-name (column value). No other means, such as pointers, can be used to access data.</string>
    <string name="btn3">The NULL values in a database must be given a systematic and uniform treatment. This is a very important rule because a NULL can be interpreted as one the following − data is missing, data is not known, or data is not applicable.</string>
    <string name="btn4">The structure description of the entire database must be stored in an online catalog, known as data dictionary, which can be accessed by authorized users. Users can use the same query language to access the catalog which they use to access the database itself.</string>
    <string name="btn5">A database can only be accessed using a language having linear syntax that supports data definition, data manipulation, and transaction management operations. This language can be used directly or by means of some application. If the database allows access to data without any help of this language, then it is considered as a violation.</string>
    <string name="btn6">All the views of a database, which can theoretically be updated, must also be updatable by the system.</string>
    <string name="btn7">A database must support high-level insertion, updation, and deletion. This must not be limited to a single row, that is, it must also support union, intersection and minus operations to yield sets of data records.</string>
    <string name="btn8">The data stored in a database must be independent of the applications that access the database. Any change in the physical structure of a database must not have any impact on how the data is being accessed by external applications.</string>
    <string name="btn9">The logical data in a database must be independent of its user’s view (application). Any change in logical data must not affect the applications using it. For example, if two tables are merged or one is split into two different tables, there should be no impact or change on the user application. This is one of the most difficult rule to apply.</string>
    <string name="btn10">A database must be independent of the application that uses it. All its integrity constraints can be independently modified without the need of any change in the application. This rule makes a database independent of the front-end application and its interface.</string>
    <string name="btn11">The end-user must not be able to see that the data is distributed over various locations. Users should always get the impression that the data is located at one site only. This rule has been regarded as the foundation of distributed database systems.</string>
    <string name="btn12">If a system has an interface that provides access to low-level records, then the interface must not be able to subvert the system and bypass security and integrity constraints.</string>
</resources>
